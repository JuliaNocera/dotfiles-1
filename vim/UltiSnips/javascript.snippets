snippet _comp "React Component" b
import PropTypes from 'prop-types'
import React, { Component } from 'react'

export default class `!v expand("%:t:r")` extends Component {
	static propTypes = {
		${1:prop}: PropTypes.${2:string}
	}

	render() {
		const { $1 } = this.props
		$0
		return (
			${3:<div />}
		)
	}
}
endsnippet

snippet reducer "Reducer" b
const ${1:reducer} = (state = ${2:[]}, action) => {
	switch (action.type) {
		$0
		default:
			return state
	}
}
endsnippet

snippet _container "React Container" b
import { connect } from 'react-redux'
import React, { Component, PropTypes } from 'react'

@connect(mapStateToProps)
export default class `!v expand("%:t:r")` extends Component {
	static propTypes = {
		${2:prop}: PropTypes.${3:string}
	}

	render() {
		const { $2 } = this.props
		$0
		return (
			${4:<div />}
		)
	}
}

function mapStateToProps(state) {
	return {
		${5:projects}: state.${6:projects}
	}
}
endsnippet

snippet _rsl "Stateless component" b
import PropTypes from 'prop-types'
import React from 'react'

const ${1:Component} = (${2:{ children }}) => (
	${3:<div>{ children }</div>}
)

$1.propTypes = {
	${4:children: PropTypes.node}
}

export default $1
endsnippet

snippet log
console.log($1)
endsnippet

snippet props
this.props
endsnippet

snippet state
this.state
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
	$1
}
endsnippet

snippet scu "should component update" b
shouldComponentUpdate(${1:nextProps,} ${2:nextState}) {
	$0
}
endsnippet

snippet cwu "component will unmount" b
componentWillUnmount() {
	$0
}
endsnippet

snippet ncu "no component update" b
shouldComponentUpdate() {
	return false
}
endsnippet

snippet imp "import" b
import $1 from '$2'
endsnippet

snippet pt "propTypes" b
static propTypes = {
	$1: PropTypes.$2
}

endsnippet

snippet if
if ($1) {
	$2
}
endsnippet

snippet if!
if (!$1) {
	$2
}
endsnippet

snippet bind
this.$1 = this.$1.bind(this)$0
endsnippet

snippet dp
static defaultProps = {
	$0
}
endsnippet

snippet it "spec it block" b
it('$1', () => {
	$0
})
endsnippet

snippet describe "describe it block" b
describe('$1', () => {
	$0
})
endsnippet

snippet con "constructor" b
constructor(props) {
	super(props)

	$0
}
endsnippet

snippet sty "styled component" b
import styled from 'styled-components'

export default styled.div`
	$0
`
endsnippet
